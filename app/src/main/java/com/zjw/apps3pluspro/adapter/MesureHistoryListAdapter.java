package com.zjw.apps3pluspro.adapter;import android.annotation.SuppressLint;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.TextView;import com.zjw.apps3pluspro.R;import com.zjw.apps3pluspro.sql.entity.HealthInfo;import com.zjw.apps3pluspro.utils.JavaUtil;import com.zjw.apps3pluspro.utils.MyTime;import java.util.ArrayList;import java.util.List;/** * 心电测量历史列表适配器 */public class MesureHistoryListAdapter extends BaseAdapter {    public static final int TYPE_ECG = 0;    public static final int TYPE_PPG = 1;    static class ViewHolder {        TextView list_ecg_mesure_date;        TextView list_ecg_mesure_heart;        TextView list_ecg_mesure_systolic;        TextView list_ecg_mesure_diastolic;        TextView list_ecg_mesure_state;        TextView list_ecg_mesure_index_value, title1;    }    private List<HealthInfo> mHealthInfo;    private LayoutInflater mInflator;    private int type;    private Context context;    public MesureHistoryListAdapter(Context context, int type) {        super();        this.mInflator = LayoutInflater.from(context);        mHealthInfo = new ArrayList<HealthInfo>();        this.context = context;        this.type = type;    }    public void addDevice(HealthInfo device) {        if (!mHealthInfo.contains(device)) {            mHealthInfo.add(device);        }    }    public HealthInfo getDevice(int position) {        return mHealthInfo.get(position);    }    public void RemoveDevice(int position) {    }    public void setDeviceList(List<HealthInfo> healt_info_list) {        mHealthInfo = healt_info_list;    }    public void RemoveAllDevice() {        mHealthInfo.removeAll(mHealthInfo);    }    public void clear() {        mHealthInfo.clear();    }    @Override    public int getCount() {        return mHealthInfo.size();    }    @Override    public Object getItem(int i) {        return mHealthInfo.get(i);    }    @Override    public long getItemId(int i) {        return i;    }    @SuppressLint("ResourceAsColor")    @Override    public View getView(int i, View view, ViewGroup viewGroup) {        ViewHolder viewHolder;        // General ListView optimization code.        if (view == null) {            view = mInflator.inflate(R.layout.listitem_ecg_mesure_history, null);            viewHolder = new ViewHolder();            viewHolder.list_ecg_mesure_date = (TextView) view.findViewById(R.id.list_ecg_mesure_date);            viewHolder.list_ecg_mesure_heart = (TextView) view.findViewById(R.id.list_ecg_mesure_heart);            viewHolder.list_ecg_mesure_systolic = (TextView) view.findViewById(R.id.list_ecg_mesure_systolic);            viewHolder.list_ecg_mesure_diastolic = (TextView) view.findViewById(R.id.list_ecg_mesure_diastolic);            viewHolder.list_ecg_mesure_state = (TextView) view.findViewById(R.id.list_ecg_mesure_state);            viewHolder.list_ecg_mesure_index_value = (TextView) view.findViewById(R.id.list_ecg_mesure_index_value);            viewHolder.title1 = (TextView) view.findViewById(R.id.title1);            view.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) view.getTag();        }        HealthInfo myHealthInfo = mHealthInfo.get(i);        if (type == TYPE_ECG) {            if (myHealthInfo.getSensor_type().equals("5")) {                viewHolder.title1.setText(context.getResources().getString(R.string.ppg_health_index));            } else {                viewHolder.title1.setText(context.getResources().getString(R.string.health_index));            }        } else {            viewHolder.title1.setText(context.getResources().getString(R.string.health_index));        }        if (!JavaUtil.checkIsNull(myHealthInfo.getMeasure_time())) {            viewHolder.list_ecg_mesure_date.setText(MyTime.getMyData(myHealthInfo.getMeasure_time()));        } else {            viewHolder.list_ecg_mesure_date.setText("");        }        if (!JavaUtil.checkIsNull(myHealthInfo.getHealth_heart())) {            viewHolder.list_ecg_mesure_heart.setText(myHealthInfo.getHealth_heart());        } else {            viewHolder.list_ecg_mesure_heart.setText("");        }        if (!JavaUtil.checkIsNull(myHealthInfo.getHealth_systolic())) {            viewHolder.list_ecg_mesure_systolic.setText(myHealthInfo.getHealth_systolic());        } else {            viewHolder.list_ecg_mesure_systolic.setText("0");        }        if (!JavaUtil.checkIsNull(myHealthInfo.getHealth_diastolic())) {            viewHolder.list_ecg_mesure_diastolic.setText(myHealthInfo.getHealth_diastolic());        } else {            viewHolder.list_ecg_mesure_diastolic.setText("0");        }        if (!JavaUtil.checkIsNull(myHealthInfo.getIndex_health_index())) {            viewHolder.list_ecg_mesure_index_value.setText(myHealthInfo.getIndex_health_index());        } else {            viewHolder.list_ecg_mesure_index_value.setText("0");        }        String s_index = myHealthInfo.getIndex_health_index();        int health_number = Integer.parseInt(s_index);        if (health_number <= 70) {            viewHolder.list_ecg_mesure_state.setText(context.getString(R.string.health_index_sub));        } else if (health_number <= 90) {            viewHolder.list_ecg_mesure_state.setText(context.getString(R.string.health_index_good));        } else {            viewHolder.list_ecg_mesure_state.setText(context.getString(R.string.health_index_optimal));        }        return view;    }}