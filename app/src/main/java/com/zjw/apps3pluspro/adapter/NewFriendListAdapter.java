package com.zjw.apps3pluspro.adapter;import android.annotation.SuppressLint;import android.content.Context;import android.text.TextUtils;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import com.lidroid.xutils.BitmapUtils;import com.zjw.apps3pluspro.R;import com.zjw.apps3pluspro.network.javabean.NewFriendInfoBean;import com.zjw.apps3pluspro.utils.JavaUtil;import java.util.ArrayList;import java.util.List;/** * 新的好友列表适配器 */public class NewFriendListAdapter extends BaseAdapter {    static class ViewHolder {        ImageView ci_new_friend_head;        TextView riend_new_message;        TextView friend_new_name;        Button riend_new_add_button;        Button riend_new_delete_button;    }    private List<NewFriendInfoBean.DataBean> mDataBean;    private LayoutInflater mInflator;    private Context mContext;    private MyClickListenerOne OnemListener;    private MyClickListenerTwo TwomListener;    public interface Callback {        public void click(View v);    }    public NewFriendListAdapter() {        super();    }    public NewFriendListAdapter(Context context, MyClickListenerOne one_listener, MyClickListenerTwo two_listener) {        super();        this.mInflator = LayoutInflater.from(context);        mDataBean = new ArrayList<NewFriendInfoBean.DataBean>();        mContext = context;        OnemListener = one_listener;        TwomListener = two_listener;    }    public void addDevice(NewFriendInfoBean.DataBean device) {        if (!mDataBean.contains(device)) {            mDataBean.add(device);        }    }    public void setmDataBean(List<NewFriendInfoBean.DataBean> mDataBean) {        this.mDataBean = mDataBean;    }    public NewFriendInfoBean.DataBean getDevice(int position) {        return mDataBean.get(position);    }    public void clear() {        mDataBean.clear();    }    @Override    public int getCount() {        return mDataBean.size();    }    @Override    public Object getItem(int i) {        return mDataBean.get(i);    }    @Override    public long getItemId(int i) {        return i;    }    @SuppressLint("ResourceAsColor")    @Override    public View getView(final int position, View view, ViewGroup viewGroup) {        ViewHolder viewHolder;        // General ListView optimization code.        if (view == null) {            view = mInflator.inflate(R.layout.listitem_new_friend, null);            viewHolder = new ViewHolder();            viewHolder.ci_new_friend_head = (ImageView) view.findViewById(R.id.ci_new_friend_head);            viewHolder.riend_new_message = (TextView) view.findViewById(R.id.riend_new_message);            viewHolder.friend_new_name = (TextView) view.findViewById(R.id.friend_new_name);            viewHolder.riend_new_add_button = (Button) view.findViewById(R.id.riend_new_add_button);            viewHolder.riend_new_delete_button = (Button) view.findViewById(R.id.riend_new_delete_button);            view.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) view.getTag();        }        NewFriendInfoBean.DataBean my_data_bean = mDataBean.get(position);        if (my_data_bean != null) {            // 设置头像            if (!TextUtils.isEmpty(my_data_bean.getIconUrl())) {                new BitmapUtils(mContext).display(viewHolder.ci_new_friend_head,                        my_data_bean.getIconUrl());            }            if (!JavaUtil.checkIsNull(my_data_bean.getNickName())) {                viewHolder.friend_new_name.setText(my_data_bean.getNickName());            } else {                viewHolder.friend_new_name.setText("");            }            if (!JavaUtil.checkIsNull(my_data_bean.getReqMsg())) {                viewHolder.riend_new_message.setText(my_data_bean.getReqMsg());            } else {                viewHolder.riend_new_message.setText("");            }        }        viewHolder.riend_new_add_button.setOnClickListener(OnemListener);        viewHolder.riend_new_add_button.setTag(position);        viewHolder.riend_new_delete_button.setOnClickListener(TwomListener);        viewHolder.riend_new_delete_button.setTag(position);        return view;    }    /**     * 用于回调的抽象类     *     * @author Ivan Xu     * 2014-11-26     */    public static abstract class MyClickListenerOne implements View.OnClickListener {        /**         * 基类的onClick方法         */        @Override        public void onClick(View v) {            myOnClick((Integer) v.getTag(), v);        }        public abstract void myOnClick(int position, View v);    }    /**     * 用于回调的抽象类     *     * @author Ivan Xu     * 2014-11-26     */    public static abstract class MyClickListenerTwo implements View.OnClickListener {        /**         * 基类的onClick方法         */        @Override        public void onClick(View v) {            myOnClick((Integer) v.getTag(), v);        }        public abstract void myOnClick(int position, View v);    }}