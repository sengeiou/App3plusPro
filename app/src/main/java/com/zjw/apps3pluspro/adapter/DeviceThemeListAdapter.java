package com.zjw.apps3pluspro.adapter;import android.annotation.SuppressLint;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.RadioButton;import android.widget.TextView;import com.zjw.apps3pluspro.R;import java.util.ArrayList;import java.util.List;/** * 主题历史列表适配器 */public class DeviceThemeListAdapter extends BaseAdapter {    static class ViewHolder {        RadioButton device_theme_list_radio;        TextView device_theme_list_text;    }    private List<String> mData;    private LayoutInflater mInflator;    public DeviceThemeListAdapter(Context context) {        super();        this.mInflator = LayoutInflater.from(context);        mData = new ArrayList<String>();    }    public void addDevice(String device) {        if (!mData.contains(device)) {            mData.add(device);        }    }    public String getDevice(int position) {        return mData.get(position);    }    public void RemoveDevice(int position) {    }    public void setDeviceList(List<String> healt_info_list) {        mData = healt_info_list;    }    public void RemoveAllDevice() {        mData.removeAll(mData);    }    public void clear() {        mData.clear();    }    @Override    public int getCount() {        return mData.size();    }    @Override    public Object getItem(int i) {        return mData.get(i);    }    @Override    public long getItemId(int i) {        return i;    }    @SuppressLint("ResourceAsColor")    @Override    public View getView(final int position, View view, ViewGroup viewGroup) {        ViewHolder viewHolder;        // General ListView optimization code.        if (view == null) {            view = mInflator.inflate(R.layout.listitem_device_theme, null);            viewHolder = new ViewHolder();//            viewHolder.radioButton = (RadioButton) view.findViewById(R.id.radioButton);            viewHolder.device_theme_list_text = (TextView) view.findViewById(R.id.device_theme_list_text);            view.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) view.getTag();        }        final RadioButton radio = (RadioButton) view.findViewById(R.id.device_theme_list_radio);        viewHolder.device_theme_list_radio = radio;        String myHealthInfo = mData.get(position);        viewHolder.device_theme_list_radio.setText("");        viewHolder.device_theme_list_text.setText(myHealthInfo);        //核心方法，判断单选按钮被按下的位置与之前的位置是否相等，然后做相应的操作。        if (selectID == position) {            viewHolder.device_theme_list_radio.setChecked(true);        } else {            viewHolder.device_theme_list_radio.setChecked(false);        }        // 单选按钮的点击事件监听        viewHolder.device_theme_list_radio.setOnClickListener(new View.OnClickListener() {            public void onClick(View v) {                //这一句的意思跟下面的一样，不过这个是itemClick的点击监听，而下面的是RadioButton的点击监听。                selectID = position;                /**                 * 在MyListView中使用mListViewAdapter.setOncheckChanged                 * 来监听RadioButton的点击事件，（当然，首先要判空）                 * 当我们按下单选按钮时，我们把按下的item的位置赋值给selectID                 * ，然后在上面的if语句中判断当前点击的位置与selectID的位置                 * 是否相等，如果不相等，那么说明按下了新的位置，那么就把原来位置上的选择取消掉，                 * 在新的位置让单选按钮显示选中状态就可以了。                 */                if (mCheckChange != null)                    mCheckChange.setSelectID(selectID);            }        });        return view;    }    private int selectID;    private OnMyCheckChangedListener mCheckChange;    // 回调函数，很类似OnClickListener吧，呵呵    public void setOncheckChanged(OnMyCheckChangedListener l) {        mCheckChange = l;    }    // 回調接口    public interface OnMyCheckChangedListener {        void setSelectID(int selectID);    }    // 自定义的选中方法    public void setSelectID(int position) {        selectID = position;    }}