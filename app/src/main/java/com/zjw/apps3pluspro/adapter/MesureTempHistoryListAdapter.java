package com.zjw.apps3pluspro.adapter;import android.annotation.SuppressLint;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.TextView;import com.zjw.apps3pluspro.R;import com.zjw.apps3pluspro.application.BaseApplication;import com.zjw.apps3pluspro.module.home.entity.MeasureTempModel;import com.zjw.apps3pluspro.sharedpreferences.BleDeviceTools;import com.zjw.apps3pluspro.sql.entity.MeasureTempInfo;import com.zjw.apps3pluspro.utils.JavaUtil;import com.zjw.apps3pluspro.utils.MyTime;import java.util.ArrayList;import java.util.List;/** * 心电测量历史列表适配器 */public class MesureTempHistoryListAdapter extends BaseAdapter {    //轻量级存储    private BleDeviceTools mBleDeviceTools = BaseApplication.getBleDeviceTools();    static class ViewHolder {        TextView tvBdoyValue, tvBdoyUnit;        TextView tvMesureMeasureTime;    }    private List<MeasureTempInfo> mMeasureTempInfo;    private LayoutInflater mInflator;    private Context context;    public MesureTempHistoryListAdapter(Context context) {        super();        this.mInflator = LayoutInflater.from(context);        mMeasureTempInfo = new ArrayList<MeasureTempInfo>();        this.context = context;    }    public void addDevice(MeasureTempInfo device) {        if (!mMeasureTempInfo.contains(device)) {            mMeasureTempInfo.add(device);        }    }    public MeasureTempInfo getDevice(int position) {        return mMeasureTempInfo.get(position);    }    public void RemoveDevice(int position) {    }    public void setDeviceList(List<MeasureTempInfo> healt_info_list) {        mMeasureTempInfo = healt_info_list;    }    public void RemoveAllDevice() {        mMeasureTempInfo.removeAll(mMeasureTempInfo);    }    public void clear() {        mMeasureTempInfo.clear();    }    @Override    public int getCount() {        return mMeasureTempInfo.size();    }    @Override    public Object getItem(int i) {        return mMeasureTempInfo.get(i);    }    @Override    public long getItemId(int i) {        return i;    }    @SuppressLint("ResourceAsColor")    @Override    public View getView(int i, View view, ViewGroup viewGroup) {        ViewHolder viewHolder;        // General ListView optimization code.        if (view == null) {            view = mInflator.inflate(R.layout.listitem_temp_mesure_history, null);            viewHolder = new ViewHolder();            viewHolder.tvBdoyValue = (TextView) view.findViewById(R.id.tvBdoyValue);            viewHolder.tvBdoyUnit = (TextView) view.findViewById(R.id.tvBdoyUnit);            viewHolder.tvMesureMeasureTime = (TextView) view.findViewById(R.id.tvMesureMeasureTime);            view.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) view.getTag();        }        MeasureTempModel mMeasureTempModel = new MeasureTempModel(mMeasureTempInfo.get(i));        //华氏度        if (mBleDeviceTools.getTemperatureType() == 1) {            viewHolder.tvBdoyUnit.setText(context.getString(R.string.fahrenheit_degree));        }        //摄氏度        else {            viewHolder.tvBdoyUnit.setText(context.getString(R.string.centigrade));        }        if (!JavaUtil.checkIsNull(mMeasureTempModel.getMeasureTempDayBody())) {            viewHolder.tvBdoyValue.setText(mMeasureTempModel.getMeasureTempDayBody());        } else {            viewHolder.tvBdoyValue.setText(context.getString(R.string.sleep_gang));        }        if (!JavaUtil.checkIsNull(mMeasureTempModel.getMeasureTempTime())) {            viewHolder.tvMesureMeasureTime.setText(MyTime.getMyData(mMeasureTempModel.getMeasureTempTime()));        } else {            viewHolder.tvMesureMeasureTime.setText(context.getString(R.string.sleep_gang));        }        return view;    }}