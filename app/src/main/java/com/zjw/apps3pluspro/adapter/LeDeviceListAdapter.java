package com.zjw.apps3pluspro.adapter;import android.annotation.SuppressLint;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.TextView;import com.zjw.apps3pluspro.R;import com.zjw.apps3pluspro.module.device.entity.DeviceModel;import com.zjw.apps3pluspro.utils.log.MyLog;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;/** * 搜索蓝牙列表适配器 */public class LeDeviceListAdapter extends BaseAdapter {    private final String TAG = LeDeviceListAdapter.class.getSimpleName();    static class ViewHolder {        TextView deviceName;        TextView deviceAddress;        TextView deviceRssi;    }    private ArrayList<DeviceModel> mLeDevices;    private LayoutInflater mInflator;    private Context mContext;    public LeDeviceListAdapter(Context context) {        super();        mContext = context;        this.mInflator = LayoutInflater.from(context);        mLeDevices = new ArrayList<DeviceModel>();    }    public String addDevice(DeviceModel device) {        device.setMumber(mLeDevices.size());        if (getIsRepeat(mLeDevices, device)) {            mLeDevices.add(0, device);            MyLog.i(TAG, "search deviceName =" + device.getDevice().getName() + " mac=" + device.getDevice().getAddress());            return device.getDevice().getAddress();        } else {            return "";        }    }    public DeviceModel getDevice(int position) {        return mLeDevices.get(position);    }    public void clear() {        mLeDevices.clear();    }    @Override    public int getCount() {        return mLeDevices.size();    }    @Override    public Object getItem(int i) {        return mLeDevices.get(i);    }    @Override    public long getItemId(int i) {        return i;    }    @SuppressLint("ResourceAsColor")    @Override    public View getView(int i, View view, ViewGroup viewGroup) {        ViewHolder viewHolder;        // General ListView optimization code.        if (view == null) {            view = mInflator.inflate(R.layout.listitem_device, null);            viewHolder = new ViewHolder();            viewHolder.deviceAddress = view.findViewById(R.id.device_address);            viewHolder.deviceName = view.findViewById(R.id.device_name);            viewHolder.deviceRssi = view.findViewById(R.id.device_rssi);            view.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) view.getTag();        }        DeviceModel device = mLeDevices.get(i);        String deviceName = device.name;        if (deviceName != null && deviceName.length() > 0) {            viewHolder.deviceName.setText(deviceName);        } else {            viewHolder.deviceName.setText(mContext.getString(R.string.seach_device_etxt1));        }        viewHolder.deviceAddress.setText(device.address);        viewHolder.deviceRssi.setText(String.valueOf(device.rssi));        return view;    }    private boolean getIsRepeat(ArrayList<DeviceModel> list_device, DeviceModel device) {        boolean result = true;        for (int i = 0; i < list_device.size(); i++) {            if (list_device.get(i).getDevice().getAddress().equals(device.getDevice().getAddress())) {                return false;            }        }        return result;    }    public void MyDevicesort() {        //按名称排序        Collections.sort(mLeDevices, new SortByBleDevice());    }    static class SortByBleDevice implements Comparator {        public int compare(Object o1, Object o2) {            DeviceModel mDeviceModel1 = (DeviceModel) o1;            DeviceModel mDeviceModel2 = (DeviceModel) o2;            int num1 = mDeviceModel1.getRssi();            int num2 = mDeviceModel2.getRssi();            int aa = 0;            if (num2 > num1) {                aa = (num2 - num1);            }            if (num2 < num1) {                aa = (num2 - num1);            }            return aa;        }    }}